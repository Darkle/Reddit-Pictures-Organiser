import { h, patch } from '../web_modules/superfine.js'

import {store} from '../store/store.lsc'
import {getSubImages} from '../fetchSubImages.lsc'
import {log} from '../logger.lsc'
import {$, setPageTitle, notOnSubredditPage} from '../utils.lsc'

loadSubredditPage({subreddit}) ->
  setPageTitle(`RPO - ${subreddit}`)
  store.removeStoredFetchedSubredditImages()

  initialRender = true
  patch($('#app'), subredditPage(store, initialRender))

  getSubImages(subreddit, renderSubPage).catch(log)    

subredditPage(state, initialRender = false) ->
  if initialRender:
     return h('main', {id: 'app', class: 'subredditPage'}, [
       h('div', {class: 'subLoadingNotifier'}, 'Loading Images...')
      ])
  if !state.fetchedSubredditImages.length:
    return h('main', {id: 'app', class: 'subredditPage'}, [
      h('div', {class: 'subLoadingNotifier'}, 'No Images Found')
    ])
    
  h('main', {id: 'app', class: 'subredditPage'}, [
    state.fetchedSubredditImages.map(image =>
      h('div', {class: 'thumbnail-container'}, [
        h('img', {class: 'thumbnail', src: image.thumbnail, 'data-id': image.id})
      ])
    )
  ])

/*****
We are throwing here if a fetch is sent and received, but the user navigates away, we want to stop
any more fetch requests and html updates.
*****/
renderSubPage() ->
  if(notOnSubredditPage()) return Promise.reject(new Error('change this to be from my error class'))
  patch($('#app'), subredditPage(store))

export {
  loadSubredditPage
}