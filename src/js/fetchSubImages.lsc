import { pTimes } from './web_modules/p-times.js'

import { pipe, notOnSubredditPage } from './utils.lsc'
import { store } from './store/store.lsc'

fetchSubImages(subreddit) ->
  if notOnSubredditPage(): return Promise.reject(new Error('change this to be from my error class'))
  
  fetch(generateFetchUrl(subreddit))
    .then(resp => resp.json())
    .then(resp => {
      images = resp?.data?.children ?? []
      processedImages = processImages(images)

      if !images.length: return Promise.reject(new Error('change this to be from my error class'))

      store.storeFetchedSubredditImages(processedImages)

      return processedImages
    })

getSubImages(subreddit, renderFunc) ->
  numOfBatchesOfImageRequests = 5
  pTimes(numOfBatchesOfImageRequests, () -> fetchSubImages(subreddit).then(renderFunc))

generateFetchUrl(subreddit) ->
  lastFetchedSubredditImage = store.fetchedSubredditImages[store.fetchedSubredditImages.length - 1]
  pagination = if lastFetchedSubredditImage: `&after=t3_${lastFetchedSubredditImage.id}` else: ''
  `https://www.reddit.com/r/${subreddit}/.json?limit=100&count=100${pagination}`

processImages(images) -> pipe(filterImages, transformImageLinks)(images)

filterImages(images) -> images.filter(({data: image}) -> // eslint-disable-line complexity
  // reddit cross-posts start with '/'
  if image.stickied || image.url.startsWith('/'): return false

  {hostname:imageDomain, pathname} = new URL(image.url)

  if imageDomain.endsWith('imgur.com') && notImgurGallery(pathname): return true
  if imageDomain === 'i.redd.it': return true

  false
)

transformImageLinks(images) -> images.map(({data: image}) => {
    imageUrl = new URL(image.url)
    /*****
      If it isnt a https://i.imgur.com/foo.jpg url and it's not a gallery,
      convert it to https://i.imgur.com/foo.jpg
    *****/
    if imageUrl.hostname.startsWith('imgur.com') && notImgurGallery(imageUrl.pathname):
      imageUrl.pathname = imageUrl.pathname + '.jpg' // eslint-disable-line functional/immutable-data
      imageUrl.hostname = 'i.' + imageUrl.hostname // eslint-disable-line functional/immutable-data
      image.url = imageUrl.href // eslint-disable-line functional/immutable-data
      return image
    image
  })

notImgurGallery(pathname) -> pathname.match(/\//gu).length === 1

export {
  getSubImages
}